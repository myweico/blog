<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScirpt判断数据类型方法总结</title>
    <url>/blog/2020/12/26/JavaScirpt%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>JavaScript经常需要用到数据类型判断，以下是我总结的几种方法。</p>
<a id="more"></a>

<h2 id="方法一：typeof"><a href="#方法一：typeof" class="headerlink" title="方法一：typeof"></a>方法一：typeof</h2><p>typeof 是 JavaScript 中最简单的获取数据类型的方法。</p>
<p>缺点：</p>
<ul>
<li>不能区分数组、正则表达式、日期对象等引用类型的数据，引用类型全为 <code>object</code>(函数除外)</li>
</ul>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'string'</span>;</span><br><span class="line"><span class="keyword">var</span> number = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> boolean = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> nullValue = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> undefinedValue = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/.*/</span>;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'typeof string: '</span>, <span class="keyword">typeof</span> str);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'typeof number: '</span>, <span class="keyword">typeof</span> number);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'typeof boolean: '</span>, <span class="keyword">typeof</span> boolean);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'typeof nullValue: '</span>, <span class="keyword">typeof</span> nullValue);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'typeof undefinedValue: '</span>, <span class="keyword">typeof</span> undefinedValue);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'typeof function: '</span>, <span class="keyword">typeof</span> func);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'typeof obj: '</span>, <span class="keyword">typeof</span> obj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'typeof reg: '</span>, <span class="keyword">typeof</span> reg);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'typeof date: '</span>, <span class="keyword">typeof</span> date);</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">"typeof string: "</span> <span class="string">"string"</span></span><br><span class="line"><span class="string">"typeof number: "</span> <span class="string">"number"</span></span><br><span class="line"><span class="string">"typeof boolean: "</span> <span class="string">"boolean"</span></span><br><span class="line"><span class="string">"typeof nullValue: "</span> <span class="string">"object"</span></span><br><span class="line"><span class="string">"typeof undefinedValue: "</span> <span class="string">"undefined"</span></span><br><span class="line"><span class="string">"typeof function: "</span> <span class="string">"function"</span></span><br><span class="line"><span class="string">"typeof obj: "</span> <span class="string">"object"</span></span><br><span class="line"><span class="string">"typeof reg: "</span> <span class="string">"object"</span></span><br><span class="line"><span class="string">"typeof date: "</span> <span class="string">"object"</span></span><br></pre></td></tr></table></figure>

<h2 id="方法二：instanceof"><a href="#方法二：instanceof" class="headerlink" title="方法二：instanceof"></a>方法二：instanceof</h2><p>缺点：</p>
<ul>
<li>这个方法只能判断引用数据类型</li>
<li>只能判断是否某个具体的类型，而不能直接获取对应的数据类型</li>
</ul>
<p>示例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'string'</span>;</span><br><span class="line"><span class="keyword">var</span> number = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> boolean = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> nullValue = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> undefinedValue = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/.*/</span>;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'func instanceof Function: '</span>, func <span class="keyword">instanceof</span> <span class="built_in">Function</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'reg instanceof RegExp: '</span>, reg <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'date instanceof Date: '</span>, date <span class="keyword">instanceof</span> <span class="built_in">Date</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr instanceof Array'</span>, array <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">"func instanceof Function: "</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"reg instanceof RegExp: "</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"date instanceof Date: "</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"arr instanceof Array"</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="方法三：-使用constructor"><a href="#方法三：-使用constructor" class="headerlink" title="方法三： 使用constructor"></a>方法三： 使用constructor</h2><p>缺点：</p>
<ul>
<li>开发者一旦重写 <code>prototype</code>，就容易使得数据的 <code>constructor</code> 丢失</li>
<li>与 <code>instanceof</code> 相同，只能判断数据是否某个具体的数据类型，而不能直接获取数据的数据类型</li>
</ul>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'string'</span>;</span><br><span class="line"><span class="keyword">var</span> number = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> boolean = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> nullValue = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> undefinedValue = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/.*/</span>;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方式 查看constructor</span></span><br><span class="line"><span class="comment">// 确定 null、undefined 没有 constructor且开发者重写prototype后，原有的constructor可能会丢失</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'str.countructor === String: '</span>, str.constructor === <span class="built_in">String</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"number.constructor === Number: "</span>, number.constructor === <span class="built_in">Number</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"boolean.constructor === Boolean: "</span>, boolean.constructor === <span class="built_in">Boolean</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<h2 id="方法四：最准确的方法-使用-Object-prototype-toString"><a href="#方法四：最准确的方法-使用-Object-prototype-toString" class="headerlink" title="方法四：最准确的方法 - 使用 Object.prototype.toString()"></a>方法四：最准确的方法 - 使用 Object.prototype.toString()</h2><p>封装的函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第四种方式，最准确的方式,使用Object.prototype.toString</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> typeString = <span class="built_in">Object</span>.prototype.toString.apply(value);</span><br><span class="line">  <span class="keyword">return</span> typeString.slice(<span class="number">8</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'string'</span>;</span><br><span class="line"><span class="keyword">var</span> number = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> boolean = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> nullValue = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> undefinedValue = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/.*/</span>;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四种方式，最准确的方式,使用Object.prototype.toString</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> typeString = <span class="built_in">Object</span>.prototype.toString.apply(value);</span><br><span class="line">  <span class="keyword">return</span> typeString.slice(<span class="number">8</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString string: '</span>, toString(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString number: '</span>, toString(number));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString boolean: '</span>, toString(boolean));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString nullValue: '</span>, toString(nullValue));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString undefinedValue: '</span>, toString(undefinedValue));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString function: '</span>, toString(func));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString obj: '</span>, toString(obj));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString reg: '</span>, toString(reg));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString date: '</span>, toString(date));</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;toString string: &quot; &quot;String&quot;</span><br><span class="line">&quot;toString number: &quot; &quot;Number&quot;</span><br><span class="line">&quot;toString boolean: &quot; &quot;Boolean&quot;</span><br><span class="line">&quot;toString nullValue: &quot; &quot;Null&quot;</span><br><span class="line">&quot;toString undefinedValue: &quot; &quot;Undefined&quot;</span><br><span class="line">&quot;toString function: &quot; &quot;Function&quot;</span><br><span class="line">&quot;toString obj: &quot; &quot;Object&quot;</span><br><span class="line">&quot;toString reg: &quot; &quot;RegExp&quot;</span><br><span class="line">&quot;toString date: &quot; &quot;Date&quot;</span><br></pre></td></tr></table></figure>

<h2 id="方法五：使用JS自带的函数判断"><a href="#方法五：使用JS自带的函数判断" class="headerlink" title="方法五：使用JS自带的函数判断"></a>方法五：使用JS自带的函数判断</h2><p>例如：<code>Array.isArray()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.isArray([]);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScirpt</tag>
      </tags>
  </entry>
  <entry>
    <title>调试神器-Charles抓包工具的使用</title>
    <url>/blog/2020/11/14/charles-notes/</url>
    <content><![CDATA[<h2 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h2><p>Charles 是一个抓包软件，能够抓取电脑以及手机上的 http/https 的网络包，对于我们调试接口来说，十分方便。</p>
<p>Charles 提供的功能：</p>
<ul>
<li>抓包</li>
<li>修改请求，再次发送</li>
<li>并发、重复发起请求，压力测试</li>
<li>限流，调试弱网情况</li>
<li>修改请求、以及响应</li>
</ul>
<a id="more"></a>

<p>charles 的原理是，启动一个代理服务器，让请求包都经过 charles 启动的代理服务器，然后再请求对应的 url。</p>
<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><h3 id="启动-charles-的-http-代理服务"><a href="#启动-charles-的-http-代理服务" class="headerlink" title="启动 charles 的 http 代理服务"></a>启动 charles 的 http 代理服务</h3><ol>
<li><p>charles 菜单栏 <code>proxy</code> - <code>proxy-setting</code><br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20201114184335.png" alt=""></p>
</li>
<li><p>启动 charles 的代理服务器，并设置端口（此处设置为 9999）<br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20201114184517.png" alt=""></p>
</li>
</ol>
<h3 id="Mac-上的代理"><a href="#Mac-上的代理" class="headerlink" title="Mac 上的代理"></a>Mac 上的代理</h3><ol>
<li>菜单栏上 <code>proxy</code> - <code>Mac Proxy</code> ，启动 Mac 上的代理</li>
</ol>
<p>这时候 Mac 上的 http 请求已经可以正常抓取到了，但是 https 还是一堆乱码甚至无法访问，因为没有还没有安装 charles 的安全证书</p>
<ol start="2">
<li>安装 charles 的安装证书，点击 charles 菜单栏 - <code>help</code> - <code>SSL Proxying</code> - <code>Install Charles Root Certificate</code><br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20201114185032.png" alt=""></li>
</ol>
<p>安装证书<br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20201114185250.png" alt=""></p>
<p>在钥匙串里面搜索到 charles 的证书 - 双击 - 在 trust 下面 设置为 <code>always trust</code><br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20201114185718.png" alt=""></p>
<ol start="3">
<li>这时候 Mac 上的 http 以及 https 的网络包都可以正常抓取了</li>
</ol>
<h3 id="ios-上的代理（安卓同理）"><a href="#ios-上的代理（安卓同理）" class="headerlink" title="ios 上的代理（安卓同理）"></a>ios 上的代理（安卓同理）</h3><ol>
<li>手机连上 Mac 同局域网下的 wifi，将 wifi 的代理设置为 charles 的代理服务即可</li>
</ol>
<p><code>wifi</code> - 点击与 Mac 同样的 wifi - 滚动到最后，<code>配置代理</code> - 设置为手动 - 代理服务器写 Mac 的 ip 地址（charles 菜单栏 - help - Local IP Address 可以获取） - 端口写 charles 的代理端口（这里是 9999）<br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20201114190842.png" style="height:600px; margin: 0 auto;" /></p>
<ol start="2">
<li><p>手机上安装证书，charles 菜单栏 <code>help</code> - <code>SSL Proxying</code> - 选择在手机上安装证书`</p>
<img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20201114190934.png" style="margin: 0 auto;" />
</li>
<li><p>手机浏览器访问对话框指定的 url，下载证书（这里是<code>chls.pro/ssl</code>)</p>
<img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20201114191023.png" style="margin: 0 auto;" />
</li>
<li><p>下载完成后，打开手机设置 - <code>通用</code> - 滑到最后，选择<code>描述文件</code> - 安装刚下载的证书</p>
</li>
<li><p>然后回到 <code>通用</code> - 滑到最前，选择<code>关于本机</code> - 然后滑到最后，选择<code>证书信任设置</code> - 选择信任刚刚安装好的证书</p>
</li>
<li><p>这时候手机上 http 以及 https 的网络包已经可以正常抓取了（调试完毕后记得关掉代理，否则会无法上网，为了安全，可将证书暂时设置为不信任，调试的时候再信任即可）</p>
</li>
</ol>
<h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><p>网络请求过多，不易找到我们想要监听的网络包，可以使用一下方法：</p>
<ul>
<li>搜索：<code>edit</code> - <code>find</code> 或者 <code>Command + F</code>快捷键筛选</li>
<li>设置 filter</li>
<li>将要监听的 url 设置为 focus</li>
<li>设置监听选项：<code>Proxy</code> - <code>Recording Settings</code>里面配置 include 或者 exclude</li>
</ul>
<h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p>在 <code>Proxy</code> -  Throttle` 可以限流，模拟各种网络请求速度，这对于我们模拟弱网条件十分有用</p>
<h2 id="编辑请求，重新发送请求"><a href="#编辑请求，重新发送请求" class="headerlink" title="编辑请求，重新发送请求"></a>编辑请求，重新发送请求</h2><ul>
<li>compose：编辑请求的内容，再次发送请求，这在测试接口的时候就非常有用</li>
<li>repeat：再次发送请求</li>
<li>repeat advance: 可以设置请求次数，并发数，可用于压测</li>
</ul>
<h2 id="修改响应"><a href="#修改响应" class="headerlink" title="修改响应"></a>修改响应</h2><ul>
<li>Map Remote: 将指定url映射到指定url，在调试微信支付域名校验的时候十分有用，可以将正式服的域名映射到测试服中，调试测试服</li>
<li>Map Local: 将响应映射到本地文件</li>
<li>Map Rewrite: 将匹配到的内容重写为指定内容，（可正则匹配）</li>
<li>BreakPoint: 设置请求的断点，可单个调试请求，修改请求和响应</li>
</ul>
]]></content>
      <tags>
        <tag>测试</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>docker搭建gitlab记录</title>
    <url>/blog/2021/01/09/docker%E6%90%AD%E5%BB%BAgitlabi%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>gitlab 是大多数公司代码管理的工具。之前也很好奇gitlab是怎么搭建的，这次尝试了使用docker搭建gitlab,其中也踩了不少的坑。大家照着我这个过程搭建应该不是什么问题。</p>
<a id="more"></a>

<p>首选需要搭建docker的环境，这里就不介绍了。大家自行去查找。本篇主要介绍怎么使用docker搭建 gitlab。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="个人主机配置"><a href="#个人主机配置" class="headerlink" title="个人主机配置"></a>个人主机配置</h3><p>个人配置环境如下：</p>
<ul>
<li>操作系统：CentOS 8.0 64位</li>
<li>CPU：1核</li>
<li>内存：4GB</li>
</ul>
<p>gitlab官方推荐至少配置 4gb的内存，若内存不足，则有可能会提示502等错误提示，若小内存主机搭建gitlab，可以设置虚拟内存，参考 <a href="https://blog.csdn.net/rex1129/article/details/110119830" target="_blank" rel="noopener">https://blog.csdn.net/rex1129/article/details/110119830</a></p>
<h3 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h3><p>由于官方的镜像站比较慢，可以先设置加速镜像库，参考：</p>
<ul>
<li>腾讯云：<a href="https://cloud.tencent.com/document/product/1207/45596" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/1207/45596</a></li>
<li>阿里云镜像加速：<a href="https://help.aliyun.com/document_detail/60750.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/60750.html</a></li>
</ul>
<p>然后拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull gitlab&#x2F;gitlab-ce</span><br></pre></td></tr></table></figure>

<p>然后准备创建好对应的文件夹</p>
<ul>
<li>/opt/gitlab/data</li>
<li>/opt/gitlab/config</li>
<li>/opt/gitlab/logs</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --detach \</span><br><span class="line">    --publish 36443:443 \</span><br><span class="line">    --publish 3680:80 \</span><br><span class="line">    --publish 3622:22 \</span><br><span class="line">    --name gitlab-ce \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v &#x2F;opt&#x2F;gitlab-ce&#x2F;config:&#x2F;etc&#x2F;gitlab \</span><br><span class="line">    -v &#x2F;opt&#x2F;gitlab-ce&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab \</span><br><span class="line">    -v &#x2F;opt&#x2F;gitlab-ce&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab \</span><br><span class="line">    gitlab&#x2F;gitlab-ce</span><br></pre></td></tr></table></figure>

<h2 id="配置-gitlab"><a href="#配置-gitlab" class="headerlink" title="配置 gitlab"></a>配置 gitlab</h2><p>进入容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it gitlab-ce &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>修改文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br></pre></td></tr></table></figure>
<p>修改内容</p>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改外部路径，回影响创建项目的路径</span></span><br><span class="line">external_url <span class="string">'http://42.193.174.122:3680'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 ssh 主机名，影响创建项目的 ssh 地址</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_ssh_host'</span>] = <span class="string">'42.193.174.122'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 ssh 的端口</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_shell_ssh_port'</span>] = <span class="number">3622</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置邮箱</span></span><br><span class="line"> gitlab_rails[<span class="string">'smtp_enable'</span>] = <span class="literal">true</span></span><br><span class="line"> gitlab_rails[<span class="string">'smtp_address'</span>] = <span class="string">"smtp.qq.com"</span></span><br><span class="line"> gitlab_rails[<span class="string">'smtp_port'</span>] = <span class="number">465</span></span><br><span class="line"> gitlab_rails[<span class="string">'smtp_user_name'</span>] = <span class="string">"47*****56@qq.com"</span></span><br><span class="line"> <span class="comment"># 腾讯邮箱的是授权码，具体可以看邮箱的文档</span></span><br><span class="line"> gitlab_rails[<span class="string">'smtp_password'</span>] = <span class="string">"ehq*********cbaf"</span></span><br><span class="line"> gitlab_rails[<span class="string">'smtp_domain'</span>] = <span class="string">"smtp.qq.com"</span></span><br><span class="line"> gitlab_rails[<span class="string">'smtp_authentication'</span>] = <span class="string">"login"</span></span><br><span class="line"> gitlab_rails[<span class="string">'smtp_enable_starttls_auto'</span>] = <span class="literal">true</span></span><br><span class="line"> gitlab_rails[<span class="string">'smtp_tls'</span>] = <span class="literal">true</span></span><br><span class="line"> gitlab_rails[<span class="string">'smtp_openssl_verify_mode'</span>] = <span class="string">'none'</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 设置发送的邮箱</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_email_from'</span>] = <span class="string">'47*****56@qq.com'</span></span><br></pre></td></tr></table></figure>

<p>修改完后，需要重新配置 gitlab</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<p>邮箱测试，需要进入到 gitlab-rails 的终端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-rails console</span><br></pre></td></tr></table></figure>
<p>发送邮箱测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Notify.test_email(&quot;myweico@qq.com&quot;,&quot;title&quot;,&quot;gitlab&quot;).deliver_now</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>运维</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter尝鲜：flutter的安装</title>
    <url>/blog/2020/12/15/flutter-install/</url>
    <content><![CDATA[<h2 id="Mac端"><a href="#Mac端" class="headerlink" title="Mac端"></a>Mac端</h2><ol>
<li><p>下载 Flutter SDK，在<a href="https://flutter.cn/docs/get-started/install" target="_blank" rel="noopener">flutter.cn</a>下载的速度会快很多</p>
</li>
<li><p>下载好后，解压到文件夹内</p>
</li>
</ol>
<a id="more"></a>

<ol start="3">
<li>由于在国内访问flutter可能会受到限制，Flutter官方为中国开发者搭建了临时镜像，将如下环境变量加入到用户环境变量中即可：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter-io.cn</span><br></pre></td></tr></table></figure>
同时，需要将flutter的命令也添加到命令行中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;$&#123;这里替换为Flutter的解压目录&#125;&#x2F;flutter&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="IOS设置"><a href="#IOS设置" class="headerlink" title="IOS设置"></a>IOS设置</h2><h3 id="配置模拟器"><a href="#配置模拟器" class="headerlink" title="配置模拟器"></a>配置模拟器</h3><p>使用以下命令打开模拟器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open -a Simulator</span><br></pre></td></tr></table></figure>

<h3 id="安装到真机"><a href="#安装到真机" class="headerlink" title="安装到真机"></a>安装到真机</h3><ol>
<li>安装<a href="http://brew.sh/" target="_blank" rel="noopener">homebrew</a></li>
<li>使用homebrew安装以下工具<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install --HEAD libimobiledevice</span><br><span class="line">brew install ideviceinstaller ios-deploy cocoapods</span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="安卓配置"><a href="#安卓配置" class="headerlink" title="安卓配置"></a>安卓配置</h2><h3 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h3><p>Android Studio 安装好模拟器后，可以使用以下命令启动模拟器(<code>Nexus_5_API_22</code>为模拟器的名字)<br>先设置zsh里面的emulator别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias emulator&#x3D;&quot;&#x2F;Users&#x2F;wmy&#x2F;Library&#x2F;Android&#x2F;sdk&#x2F;emulator&#x2F;emulator&quot;</span><br></pre></td></tr></table></figure>
<p>然后启动模拟器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">emulator -avd Nexus_5_API_22</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>flutter</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 github 图片显示不了的问题</title>
    <url>/blog/2020/02/21/github-picture-display/</url>
    <content><![CDATA[<img src="/blog/images/github-pic-display.png" class="" width="600" title="title text" alt="alt text">

<p>有时候发现，国内的 github 的图片显示不了，这就让人很苦恼。</p>
<p>其实是存放图片的<code>avatars0.githubusercontent.com</code>等相关网址被墙了原因。</p>
<p>只需要修改 host 文件的相关内容即可以让 github 正常显示图片。</p>
<a id="more"></a>
<h2 id="host-文件位置"><a href="#host-文件位置" class="headerlink" title="host 文件位置"></a>host 文件位置</h2><ul>
<li>Mac OS: <code>/etc/hosts</code></li>
<li>Windows: <code>C:\system32\drivers\etc\hosts</code></li>
</ul>
<h2 id="host-文件添加内容"><a href="#host-文件添加内容" class="headerlink" title="host 文件添加内容"></a>host 文件添加内容</h2><p>寻找到 host 文件，在里面添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># github start</span><br><span class="line">192.30.253.112    github.com</span><br><span class="line">192.30.253.119    gist.github.com</span><br><span class="line">199.232.28.133    assets-cdn.github.com</span><br><span class="line">199.232.28.133    raw.githubusercontent.com</span><br><span class="line">199.232.28.133    gist.githubusercontent.com</span><br><span class="line">199.232.28.133    cloud.githubusercontent.com</span><br><span class="line">199.232.28.133    camo.githubusercontent.com</span><br><span class="line">199.232.28.133    avatars0.githubusercontent.com</span><br><span class="line">199.232.28.133    avatars1.githubusercontent.com</span><br><span class="line">199.232.28.133    avatars2.githubusercontent.com</span><br><span class="line">199.232.28.133    avatars3.githubusercontent.com</span><br><span class="line">199.232.28.133    avatars4.githubusercontent.com</span><br><span class="line">199.232.28.133    avatars5.githubusercontent.com</span><br><span class="line">199.232.28.133    avatars6.githubusercontent.com</span><br><span class="line">199.232.28.133    avatars7.githubusercontent.com</span><br><span class="line">199.232.28.133    avatars8.githubusercontent.com</span><br><span class="line"># github end</span><br></pre></td></tr></table></figure>
<p>然后尝试刷新浏览器，便可以看到 github 可以正常显示图片了</p>
<img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20200221070415.png" class="" width="600" title="title text" alt="alt text">

<p>若不行，再尝试刷新 DNS 缓存。</p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins自动化部署前端项目实战</title>
    <url>/blog/2021/01/09/Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>在早期，我部署项目的过程是，现在本地打好包，然后连同 dist 文件夹一起推到 gitlab 上面，然后再登录到服务器上拉取。简单的项目还好，但是若有好几个前端项目，然后项目又分开发、测试、正式环境，那前面的过程就要重复很多遍，效率很低过程也很繁琐。</p>
<p>因此，就尝试了使用 Jenkins 自动化部署前端项目。弄好了之后，发现真香！效率大大提高，解放双手！舒服！下面记录了我从0到1的过程，还没自动化部署的伙伴们，赶紧试一试！</p>
<a id="more"></a>
<h2 id="自动化部署方案"><a href="#自动化部署方案" class="headerlink" title="自动化部署方案"></a>自动化部署方案</h2><p>我的自动化部署方案是</p>
<ul>
<li>所有 dev 分支的更新都会自动触发 Jenkins 构建，自动部署到测试服务器</li>
<li>master的更新，需要到 Jenkins 手动点击构建后，才会自动构建部署到正式服务器</li>
<li>Jenkins 可以选择 tag 或者分支进行构建，以便出现问题回滚</li>
<li>Jenkins 自动部署到服务器，会将 dist 保存备份，出现问题可以选择对应的备份包回滚</li>
<li>Jenkins 打包的进行状态、打包时间、打包结果都通过钉钉群通知成员</li>
</ul>
<h2 id="Jenkin的安装"><a href="#Jenkin的安装" class="headerlink" title="Jenkin的安装"></a>Jenkin的安装</h2><p>这里我主要是基于 docker 安装 jenkins，其他的安装方式可以自行查看<a href="https://www.jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">官方文档</a>。</p>
<p>环境：</p>
<ul>
<li>系统：<code>centos 8.0</code></li>
<li>docker 版本：<code>20.10.2</code></li>
<li>docker 镜像：<code>jenkinsci/blueocean</code></li>
</ul>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>搜索镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search jenkins</span><br></pre></td></tr></table></figure>
<p>docker 官方的 jenkins 镜像太老了，很多plugins都无法使用，这里使用官网文档推荐的 <code>jenkinsci/blueocean</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull jenkinsci&#x2F;blueocean</span><br></pre></td></tr></table></figure>
<h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>首先创建一个目录专门存放 jenkins 相关数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;opt&#x2F;jenkins</span><br></pre></td></tr></table></figure>
<p>实例化容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -u root --restart&#x3D;always -d -p 8081:8080 -p 8082:50000 -v &#x2F;opt&#x2F;jenkins:&#x2F;var&#x2F;jenkins_home -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock jenkinsci&#x2F;blueocean</span><br></pre></td></tr></table></figure>

<h2 id="Jenkins-初始化"><a href="#Jenkins-初始化" class="headerlink" title="Jenkins 初始化"></a>Jenkins 初始化</h2><p>Jenkins 容器创建完毕后，就可以登录8081端口登录了</p>
<p>登录的时候会叫你输入初始密码，密码的位置可以通过创建容器映射的目录获取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;opt&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword</span><br></pre></td></tr></table></figure>
<p>后续还会引导设置admin用户以及安装推荐的插件</p>
<h2 id="Jenkins-插件配置"><a href="#Jenkins-插件配置" class="headerlink" title="Jenkins 插件配置"></a>Jenkins 插件配置</h2><p>本次前端自动化部署需要安装以下插件：</p>
<ul>
<li><code>nodejs</code>：在 jenkins 里面安装 nodejs 环境，用于项目打包</li>
<li><code>Git Parameter Plugin-In</code>：用于让项目可以根据 tag 或者 branch 进行构建</li>
<li><code>GitLab</code>：可以设置Gitlab等配置，拉取gitlab的代码、通过gitlab的webhook触发 Jenkins 构建等</li>
<li><code>Publish Over SSH</code>：用于将 Jenkins 打包好的 dist 文件夹传送到服务器</li>
<li><code>DingTalk</code>：设置钉钉的机器人，在钉钉群通知 Jenkins 的打包状态</li>
</ul>
<p>安装步骤：</p>
<ol>
<li>点击首页左侧菜单的 <code>Manage Jenkins</code></li>
<li>选择 <code>Manage Plugins</code></li>
<li>点击 Tab - <code>Available</code></li>
<li>在搜索框搜索对应的插件</li>
<li>选中插件，然后点击<code>Intall without restart</code>，等待安装成功即可</li>
</ol>
<h3 id="Nodejs-插件配置"><a href="#Nodejs-插件配置" class="headerlink" title="Nodejs 插件配置"></a>Nodejs 插件配置</h3><p>点击首页的 <code>Manage Jenkins</code></p>
<p>然后选择 <code>Global Tool Configuration</code></p>
<p>滑动到下面 NodeJS 栏目，点击添加 NodeJS</p>
<p>最好添加一个跟服务器版本一致的 NodeJS 版本，避免因为版本差异出现的问题，这里选择的是 <code>10.15.0</code></p>
<p><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110143724.png" alt=""></p>
<h3 id="Gitlab-配置"><a href="#Gitlab-配置" class="headerlink" title="Gitlab 配置"></a>Gitlab 配置</h3><p>点击首页的 <code>Manage Jenkins</code>，点击 <code>Configure System</code>，查找到 gitlab 配置项</p>
<p>设置：</p>
<ul>
<li>Connection Name：Gitlab 连接的名字，随便填</li>
<li>Gitlab host URL：Gitlab 的URL，（若 Jenkins 和 Gitlab 在同一个内网内，可以填写内网地址，这样不走外网，拉取速度会快很多！）</li>
<li>Credentials：安全验证，选择可以连接到gitlab的验证方式，一开始没有的话可以点击旁边的添加，添加一个安全验证</li>
</ul>
<p>连接到Gitlab的安全验证的添加：</p>
<ul>
<li>这里类型选择了 <code>Gitlab API Token</code>（自己也可以选择密钥等其他类型）</li>
<li>登录到 gitlab，进入到用户设置，选择 <code>Access Setting</code>，设置名字、过期时间、权限，点击创建即可获得权限token<br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110161701.png" alt=""></li>
<li>在 Jenkins 的<code>Add Credentials</code>页面中的<code>API token</code>填写刚刚 Gitlab 生成的 token<br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110162206.png" alt=""></li>
</ul>
<p>添加完信息后，即可点击下面 <code>Test Connection</code>，若出现 Success 则说明配置成功<br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110162623.png" alt=""></p>
<h3 id="Publish-Over-SSH-插件配置"><a href="#Publish-Over-SSH-插件配置" class="headerlink" title="Publish Over SSH 插件配置"></a>Publish Over SSH 插件配置</h3><p>设置步骤：</p>
<ul>
<li>点击首页主菜单的 <code>Manage Jenkins</code></li>
<li>点击 <code>Configure System</code></li>
<li>设置 <code>Publish over SSH</code> 下的栏目</li>
</ul>
<p>在下面添加自己想要部署到的 Server，配置项有</p>
<ul>
<li><code>Name</code>：Server的名字，用于标识服务器的，可以自己随便起个好听的名字</li>
<li><code>HostName</code>：Server的ip地址或者域名</li>
<li><code>Username</code>：ssh 登录的用户名</li>
<li><code>Remote Directory</code>：服务器的目录，只能部署到这里目录下面（目录需要提前创建）</li>
<li><code>Passphrase / Password</code>：ssh 登录的密码，这里选择了密码登录，若使用密钥登录，可以设置 <code>Path to key</code> 和 <code>Key</code></li>
</ul>
<blockquote>
<p>若有不懂的地方，可以点击配置右边的问号图标，Jenkins 就会出现对应的提示，十分的友好，点赞！ o(￣▽￣)ｄ</p>
</blockquote>
<p>配置完后，可以点击下面的 <code>Test Configuration</code>，若提示 <code>Success</code>，则说明配置成功，若失败了，可以看一下自己是否参数配置错误了</p>
<p><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110145042.png" alt=""></p>
<h3 id="DingTalk-插件配置"><a href="#DingTalk-插件配置" class="headerlink" title="DingTalk 插件配置"></a>DingTalk 插件配置</h3><p>首先在钉钉创建好群，给群添加一个通知机器人</p>
<blockquote>
<p>小技巧：可以使用【面对面建群】创建只有自己一个人的群，然后就可以添加私人机器人了</p>
</blockquote>
<p>机器人添加步骤：</p>
<ul>
<li>点击钉钉PC端头像，选择机器人管理</li>
<li>选择添加 自定义的机器人</li>
<li>设置头像、名字、通知的群，加密我这里选择了签名 Singnure（<strong>需要提前记下来签名后面配置插件需要用到</strong>）<br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110154401.png" alt=""></li>
<li>点击完成后，就会提供对应的 webhook，这个也会用到<br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110152059.png" alt=""></li>
</ul>
<p>准备好后，配置 Jenkins 的 DingTalk 插件：</p>
<ul>
<li>点击首页菜单的 <code>Manage Jenkins</code></li>
<li>选择 <code>Configure System</code></li>
<li>配置钉钉下面的配置项，可以配置通知时机</li>
<li>点击添加机器人</li>
</ul>
<p>钉钉插件的机器人配置项如下：</p>
<ul>
<li>id：机器人id，我这里随便填了</li>
<li>名称：机器人名字，我这里随便填了</li>
<li>webhook：填写上面创建机器人的 webhook</li>
<li>关键字：加密方式为关键字的，可以将关键字写在这，因为加密方式我选择了签名，所以我这里空着</li>
<li>加密：添加创建机器人时候的 Signature</li>
</ul>
<p>设置完后，可以点击下面的测试，若钉钉群接受到机器人的通知，则说明配置成功</p>
<p><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110152859.png" alt=""></p>
<h2 id="Jenkin自动化部署前端项目"><a href="#Jenkin自动化部署前端项目" class="headerlink" title="Jenkin自动化部署前端项目"></a>Jenkin自动化部署前端项目</h2><h3 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h3><p>点击首页主菜单的 <code>New Item</code>，填写项目名字，选择 <code>Freestyle Project</code>，点击 OK</p>
<p><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110163103.png" alt=""></p>
<h3 id="总体配置（General"><a href="#总体配置（General" class="headerlink" title="总体配置（General)"></a>总体配置（General)</h3><h4 id="设置钉钉通知"><a href="#设置钉钉通知" class="headerlink" title="设置钉钉通知"></a>设置钉钉通知</h4><p>在钉钉机器人栏目下面，选择刚刚添加好的机器人<code>Jenkins通知</code>即可，高级配置里面可以选择 @所有人，配置描述等</p>
<h4 id="Gitlab-项目配置"><a href="#Gitlab-项目配置" class="headerlink" title="Gitlab 项目配置"></a>Gitlab 项目配置</h4><p>勾选 Github Project，Project Url 填写，要部署项目的Gitlab地址（内网地址可以使用的填写内网指定对应的url,这样拉取回快很多）</p>
<p>GitLab Connection 填写之前配置好的 Gitlab 连接</p>
<h4 id="配置项目的构建参数"><a href="#配置项目的构建参数" class="headerlink" title="配置项目的构建参数"></a>配置项目的构建参数</h4><p>勾选 <code>This Project is parameterized</code> - <code>Git Parameter</code><br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110165444.png" alt=""></p>
<p>Git Parameters 配置如下：</p>
<ul>
<li>Name：参数的名称</li>
<li>Description：变量的描述</li>
<li>Parameter Type：变量的类型，因为根据分支以及Tag构建，所以这里选择 <code>Brand or Tag</code></li>
<li>Default Value：变量默认值，这里填写默认进行构建的分支，即 dev</li>
</ul>
<p><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110172541.png" alt=""></p>
<blockquote>
<p>注意：还需要后面，将构建的分支设置为该参数变量才生效</p>
</blockquote>
<h3 id="源代码管理配置（Source-Code-Management"><a href="#源代码管理配置（Source-Code-Management" class="headerlink" title="源代码管理配置（Source Code Management)"></a>源代码管理配置（Source Code Management)</h3><p><code>Source Code Management</code>，选择 <code>Git</code></p>
<p>配置参数：</p>
<ul>
<li>Repository URL：填写项目的 Url 地址，可选 ssh 地址或者 http 地址（有内网地址最好替换为内网对应的地址）</li>
<li>Credentials：git 的认证方式，若 url 写的是 ssh 地址，则认证方式为密钥方式，若 url 填写 http 地址，则认证方式需要是 gitlab 账户和密码的方式</li>
<li>Branches to build：构建的分支，这里填写上面的 <code>BrandAndTag</code> 参数变量</li>
</ul>
<p><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110172826.png" alt=""></p>
<h3 id="构建触发器配置（Build-Triggers）"><a href="#构建触发器配置（Build-Triggers）" class="headerlink" title="构建触发器配置（Build Triggers）"></a>构建触发器配置（Build Triggers）</h3><p>正式服的构建任务，因为是需要在 Jenkins 手动点击构建才自动构建并部署到正式服务器（这样可避免失误合并到master分支就自动部署到正式环境了），所以可以跳过此步骤</p>
<p>而测试服的构建任务是需要一旦检测到 dev 分支有更新，就会自动构建部署到测试服，所以这里需要配置 Gitlab 的 webhook 触发 Jenkins 构建</p>
<p>勾选 <code>Build when a change is pushed to GitLab</code>。<br>其后面有一个有用的参数，即 GitLab webhook URL: <strong>`http://</strong>.<strong>.</strong>.<strong>:8081/project/VueProject`</strong></p>
<p>可以根据自己的需求进行配置触发的时机</p>
<p>点击下面的 <code>Advance</code>，里面有一项 <code>Secret token</code>，点击生成，可得到 <strong>token</strong><br><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110175221.png" alt=""></p>
<h4 id="配置-gitlab-的-webhook"><a href="#配置-gitlab-的-webhook" class="headerlink" title="配置 gitlab 的 webhook"></a>配置 gitlab 的 webhook</h4><p>进入到 gitlab 对应的项目目录，点击 <code>Setting</code> - <code>Webhooks</code></p>
<p>配置：</p>
<ul>
<li>URL：刚刚 Jenkins 给的 webhook url 参数</li>
<li>Secret Token：刚刚 Jenkins 生成的 <code>Secret Token</code></li>
<li>Trigger：配置触发的时机</li>
</ul>
<p><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110174439.png" alt=""></p>
<p>配置完后，点击<code>Add webhook</code>即可，后续可点击 Test 测试是否成功</p>
<h3 id="构建环境配置（Build-Environment）"><a href="#构建环境配置（Build-Environment）" class="headerlink" title="构建环境配置（Build Environment）"></a>构建环境配置（Build Environment）</h3><p>构建环境使用Node，所以勾选 <code>Provide Node &amp; npm bin/ folder to PATH</code></p>
<p>选择好之前配置好的 Node 环境即可</p>
<p><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110175555.png" alt=""></p>
<h3 id="构建配置（Build"><a href="#构建配置（Build" class="headerlink" title="构建配置（Build)"></a>构建配置（Build)</h3><p>点击 <code>Add build step</code> - 选择 <code>Execute shell</code></p>
<!-- ![](https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110175819.png) -->

<p>在 Command 项里面填写打包的命令即可，我的打包命令为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 设置淘宝镜像源</span></span><br><span class="line">npm i --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩好dist文件夹的内容，准备推送到服务端</span></span><br><span class="line"><span class="built_in">cd</span> ./dist</span><br><span class="line">tar -zcf dist.tar.gz *</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-1257268092.cos.ap-guangzhou.myqcloud.com/notes/20210110180522.png" alt=""></p>
<h3 id="部署到服务端配置（Post-build-Actions"><a href="#部署到服务端配置（Post-build-Actions" class="headerlink" title="部署到服务端配置（Post-build Actions)"></a>部署到服务端配置（Post-build Actions)</h3><p>点击 <code>Add post-build action</code> - 选择 <code>Send build artifacts over SSH</code></p>
<p>选择想要部署的服务器（可选项就是之前 Publish Over SSH 插件配置好的项目），可以自行添加多台部署服务器</p>
<p>这里只部署一台，也就是之前配置好的 OtherServer</p>
<p>配置项有：</p>
<ul>
<li><code>Source files</code>：发送到服务端的软件，这里的路径是相对项目中的根目录</li>
<li><code>Remove prefix</code>：移除的路径，这里移除 dist 路径</li>
<li><code>Remote directory</code>：发送到的服务端路径（必须要在该服务器配置的Remote Directory下面）</li>
<li><code>Exec command</code>：发送成功后执行的命令</li>
</ul>
<p>我这里的执行命令为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意，这里当前路径为ssh登录后的路径（默认为用户目录，即 ~/），而不是项目的目录</span></span><br><span class="line"><span class="comment"># 打开项目目录</span></span><br><span class="line"><span class="built_in">cd</span> /mount/release/qw_cms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除dist文件夹</span></span><br><span class="line">rm -rf ./dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建dist文件夹</span></span><br><span class="line">mkdir dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压到dist文件夹</span></span><br><span class="line">tar -zxf dist.tar.gz -C dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名 dist.tar.gz保存记录，以防有错误下解压来实现回滚</span></span><br><span class="line">mv dist.tar.gz `date +%Y%m%d%H%M%S`<span class="variable">$&#123;TAG_NAME&#125;</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># Todo：清除最近10次以外的备份包</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>运维</tag>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>前端模块化-CommonJS、AMD、UMD以及ESM</title>
    <url>/blog/2020/07/05/front-end-modules-summary/</url>
    <content><![CDATA[<h2 id="什么是前端模块？"><a href="#什么是前端模块？" class="headerlink" title="什么是前端模块？"></a>什么是前端模块？</h2><p>模块是实现特定功能的部件集合，在前端中，模块则对应于实现某功能的函数、逻辑的集合。</p>
<p>通常来说，一个文件就是一个模块，有自己的作用域，可以导入其他模块以及向外暴露自己的函数和变量。</p>
<p>目前前端模块化有CommonJS、AMD、CMD和ESM这几种主要的标准，而UMD则是一种兼容 CommonJS、AMD以及CMD的一种兼容性写法。</p>
<a id="more"></a>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p><code>NodeJS</code> 是 <code>CommonJS</code> 规范的主要实现者。<code>CommonJS</code>主要实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -- todo.js</span></span><br><span class="line"><span class="keyword">var</span> todos = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    todo.push(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTodo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> todos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 module.exports 导出模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    addTodo,</span><br><span class="line">    getTodo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -- index.js</span></span><br><span class="line"><span class="comment">// 通过require引入模块</span></span><br><span class="line"><span class="keyword">var</span> todo  = <span class="built_in">require</span>(<span class="string">'./todo'</span>);</span><br><span class="line"></span><br><span class="line">todo.addTodo(<span class="string">'read document'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="exports-和-module-exports-的区别"><a href="#exports-和-module-exports-的区别" class="headerlink" title="exports 和 module.exports 的区别"></a>exports 和 module.exports 的区别</h3><p>exports是对module.exports的初始引用，一旦 module.exports 的引用指向发生改变，则exports 的引用将会失效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若module.exports 的引用没有发生改变，则exports和module.exports 同效</span></span><br><span class="line">exports = &#123;</span><br><span class="line">    addTodos,</span><br><span class="line">    getTodos</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.exports 的引用发生改变，则 exports 失效</span></span><br><span class="line">modules.exports = &#123;</span><br><span class="line">    addTodos,</span><br><span class="line">    getTodos</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时exports已失效</span></span><br><span class="line">exports.removeTodo = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    todos = todos.splice(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CommonJS 加载模块是同步的，只有加载完成才执行后面的操作。</p>
<p>对于NodeJS，由于模块都已经是存在本地的了，所以同步加载模块比较快，不用考虑异步加载。</p>
<p>而对于浏览器来说，若模块都是从网络上同步加载，这将阻塞后面内容的渲染，使用同步加载方案的CommonJS就有点不太合适了。所以就有了 AMD、CMD 等异步加载模块的方案。</p>
<h2 id="AMD-和-requireJS"><a href="#AMD-和-requireJS" class="headerlink" title="AMD 和 requireJS"></a>AMD 和 requireJS</h2><p><a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" target="_blank" rel="noopener">AMD</a> (即 Asynchronous Module Definitio)。<a href="https://requirejs.org/" target="_blank" rel="noopener">requireJS</a> 就是实现了 AMD 规范的一个模块加载库。</p>
<p>通过引入 requireJS，我们就不必手动通过 scirpt 标签引入各种库，<code>requireJS</code> 会帮我们处理这一切。</p>
<h3 id="引入requireJS"><a href="#引入requireJS" class="headerlink" title="引入requireJS"></a>引入requireJS</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- data-main attribute tells require.js to load</span></span><br><span class="line"><span class="comment">             scripts/main.js after require.js loads. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"scripts/main"</span> <span class="attr">src</span>=<span class="string">"scripts/require.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Sample Project<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>requireJS 加载完后，就会执行 <code>scripts/main</code> 的脚本，相关的引入代码可以在  main 文件中编写</p>
<h3 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h3><blockquote>
<p>requireJS 定义模块文档 =&gt; <a href="https://requirejs.org/docs/api.html#define" target="_blank" rel="noopener">https://requirejs.org/docs/api.html#define</a></p>
</blockquote>
<p>AMD 模块使用 <code>define</code> 函数定义模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(moduleName?: String, dependencies?: String[], factory: Function|Object);</span><br></pre></td></tr></table></figure>
<p>各参数定义如下：</p>
<ul>
<li>moduleName: 模块名</li>
<li>dependencies: 依赖列表，每个模块引入后，将会传入到 factory 函数中，默认值为[“require”, “exports”, “module”]</li>
<li>factory: 最后一个参数，定义了模块的具体实现，模块的导出值为函数的返回值或者指定对象</li>
</ul>
<h4 id="简单模块"><a href="#简单模块" class="headerlink" title="简单模块"></a>简单模块</h4><p>若一个模块，只有输出简单的键值对，则只需在define()定义这些键值对就可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(&#123;</span><br><span class="line">    todos: [</span><br><span class="line">        <span class="string">'read book'</span>,</span><br><span class="line">        <span class="string">'read document'</span>,</span><br><span class="line">        <span class="string">'runnig'</span></span><br><span class="line">    ],</span><br><span class="line">    completed: [</span><br><span class="line">        <span class="string">'breakfast'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="函数模块"><a href="#函数模块" class="headerlink" title="函数模块"></a>函数模块</h4><p>若一个模块没有依赖，只需要函数来做一些简单的初始化工作，然后输出模块，那么可以使用一个函数来定义模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//my/shirt.js now does setup work</span></span><br><span class="line"><span class="comment">//before returning its module definition.</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//Do setup work here</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        color: <span class="string">"black"</span>,</span><br><span class="line">        size: <span class="string">"unisize"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="定义带有依赖的模块"><a href="#定义带有依赖的模块" class="headerlink" title="定义带有依赖的模块"></a>定义带有依赖的模块</h4><p>比如，定义一个 <code>todo</code>的模块，依赖 <code>jQuery</code>模块，则模块的定义为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="string">'todo'</span>, [<span class="string">'jQuery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> todos = [];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        todo.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getTodo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> todos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模块输出</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        addTodo,</span><br><span class="line">        getTodo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="使用require引入模块"><a href="#使用require引入模块" class="headerlink" title="使用require引入模块"></a>使用require引入模块</h4><p>也可以使用 <code>require</code> 引用外部依赖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>),</span><br><span class="line">            b = <span class="built_in">require</span>(<span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Return the module value</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">requrie([<span class="string">'todo'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123;</span><br><span class="line">  todo.addTodo(<span class="string">'read document'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="CMD-和-sea-js"><a href="#CMD-和-sea-js" class="headerlink" title="CMD 和 sea.js"></a>CMD 和 sea.js</h2><p><a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="noopener">CMD</a>(Common Module Definition)，而<code>sea.js</code>就是实现 CMD 规范的一个模块加载包。</p>
<h3 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义一个模块</span><br><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line">  &#x2F;&#x2F; 加载jquery模块</span><br><span class="line">  var $ &#x3D; require(&#39;jquery&#39;);</span><br><span class="line">  &#x2F;&#x2F; 直接使用模块里的方法</span><br><span class="line">  $(&#39;#header&#39;).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>原理可以参考 卢勃 在<a href="https://www.zhihu.com/question/20342350/answer/14828786" target="_blank" rel="noopener">知乎</a>上的回答。原话就是</p>
<pre><code>1. 通过回调函数的Function.toString函数，使用正则表达式来捕捉内部的require字段，找到require(&apos;jquery&apos;)内部依赖的模块jquery

2. 根据配置文件，找到jquery的js文件的实际路径

3. 在dom中插入script标签，载入模块指定的js，绑定加载完成的事件，使得加载完成后将js文件绑定到require模块指定的id（这里就是jquery这个字符串）上

4. 回调函数内部依赖的js全部加载（暂不调用）完后，调用回调函数

5. 当回调函数调用require(&apos;jquery&apos;)，即执行绑定在&apos;jquery&apos;这个id上的js文件，即刻执行，并将返回值传给var b</code></pre><h3 id="与requireJS的区别"><a href="#与requireJS的区别" class="headerlink" title="与requireJS的区别"></a>与requireJS的区别</h3><p><code>sea.js</code> 和 <code>requireJS</code> 都是在执行回调前加载完所有依赖，区别就是<code>requreJS</code> 在加载完依赖后立即执行，而<code>sea.js</code>则是执行回调函数的时候，require 依赖的时候时候才执行对应依赖的代码。</p>
<p>执行代码的时间区别不大，除非是很大的库。</p>
<h2 id="ESM"><a href="#ESM" class="headerlink" title="ESM"></a>ESM</h2><p>ES6 提出了 Javascript 标准的模块规范。详细的ESM模块可以查看 <a href="https://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">阮一峰老师的 ES6 教程</a></p>
<h3 id="模块定义-1"><a href="#模块定义-1" class="headerlink" title="模块定义"></a>模块定义</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var todos &#x3D; [];</span><br><span class="line"></span><br><span class="line">function addTodo(item) &#123;</span><br><span class="line">    todo.push(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getTodo() &#123;</span><br><span class="line">    return todos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过 module.exports 导出模块</span><br><span class="line">export default &#123;</span><br><span class="line">    addTodo,</span><br><span class="line">    getTodo</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="模块的使用"><a href="#模块的使用" class="headerlink" title="模块的使用"></a>模块的使用</h3><p>ESM 使用 <code>import</code> 导入相关的模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> todo <span class="keyword">from</span> <span class="string">'./todo'</span>;</span><br><span class="line"></span><br><span class="line">todo.addTodo(<span class="string">'read document'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>UMD（Universial Module Definition)，是一种兼容 <code>CommonJS</code>、<code>AMD</code>、<code>CMD</code>规范的一种写法。</p>
<p>UMD的写法如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="comment">// commonJS</span></span><br><span class="line">        depModule = <span class="built_in">require</span>(<span class="string">'depModule'</span>);</span><br><span class="line">        <span class="built_in">module</span>.exports = factory(depModule);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd)  &#123;</span><br><span class="line">        <span class="comment">// amd</span></span><br><span class="line">        define([<span class="string">'depModule'</span>], factory);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.cmd) &#123;</span><br><span class="line">        <span class="comment">// cmd</span></span><br><span class="line">        define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> depModule = <span class="built_in">require</span>(<span class="string">'depModule'</span>);</span><br><span class="line">            <span class="keyword">return</span> factory(depModule)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 引入到全局变量中</span></span><br><span class="line">        global.umdModule = factory(global.depModule)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">depModule</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里可以使用depModule</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模块的导出</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="ES6-模块与-CommonJS-模块的差异"><a href="#ES6-模块与-CommonJS-模块的差异" class="headerlink" title="ES6 模块与 CommonJS 模块的差异"></a>ES6 模块与 CommonJS 模块的差异</h2><p>参考<a href="https://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82" target="_blank" rel="noopener">阮一峰老师的话</a>，差异主要有两点</p>
<ul>
<li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li>
<li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://shouce.jb51.net/webpack/amd.html" target="_blank" rel="noopener">AMD 规范</a></li>
<li><a href="http://hexo.wbjiang.cn/sea.js%E7%9A%84%E5%90%8C%E6%AD%A5%E9%AD%94%E6%B3%95.html" target="_blank" rel="noopener">sea.js的同步魔法</a></li>
</ul>
]]></content>
      <tags>
        <tag>front-end</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的JavaScript算法</title>
    <url>/blog/2020/12/23/%E5%B8%B8%E7%94%A8%E7%9A%84JavaScript%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>常用的 JavaScript 方法。</p>
<a id="more"></a>

<h2 id="Dom-相关"><a href="#Dom-相关" class="headerlink" title="Dom 相关"></a>Dom 相关</h2><h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"father-id"</span>).onClick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event = event || <span class="built_in">window</span>.event;</span><br><span class="line">  <span class="keyword">const</span> target = event.target || event.srcElement;</span><br><span class="line">  <span class="keyword">if</span> (target.nodeName.toLowerCase() === <span class="string">'xxx'</span>) &#123;</span><br><span class="line">    <span class="comment">// event handler</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h2><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">let</span> _array = [];</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(elem)) &#123;</span><br><span class="line">      _array = _array.concat(flatten(elem));</span><br><span class="line">      <span class="comment">// arr = [...arr, ...flatten(elem)]</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 不是数组元素</span></span><br><span class="line">      _array.push(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> _array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, [<span class="number">2</span>], [[<span class="number">3</span>]], [[[<span class="number">4</span>]]]];</span><br><span class="line"><span class="keyword">const</span> arrayFlatten= flatten(array);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'array before flatten'</span>, array);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'array after flatten'</span>, arrayFlatten);</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array before flatten (4) [1, Array(1), Array(1), Array(1)]</span><br><span class="line">array after flatten: [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>

<h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>方法 1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">  const arrayUnique = [];</span><br><span class="line">  array.forEach(function (elem) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">set</span>.has(elem)) return;</span><br><span class="line"></span><br><span class="line">    // 元素不存在，添加到数组中</span><br><span class="line">    arrayUnique.push(elem);</span><br><span class="line">    <span class="keyword">set</span>.add(elem);</span><br><span class="line">  &#125;)</span><br><span class="line">  return arrayUnique;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(unique([1,2,2,2,3,4,5]))</span><br></pre></td></tr></table></figure>

<p>方法 2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(array)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]));</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ 1, 2, 3, 4, 5 ]</span><br></pre></td></tr></table></figure>

<h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>方法 1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="comment">// 处理了键名为 Symbol 的情况</span></span><br><span class="line">  [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)].foreach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    result[key] = obj[key]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法 2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(obj) ? [...obj] : &#123; ...obj &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法 3</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;, obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>方法 1，使用 <code>JSON.stringify(JSON.parse(obj))</code><br>缺点：</p>
<ul>
<li>遇到 <code>undefined</code>, <code>NaN</code>, <code>-Infinity</code>, <code>Infinity</code>， <code>function</code>，<code>RegExp</code> 会默认转为 <code>null</code>,</li>
<li>遇到函数会报错</li>
<li><code>Date</code>对象会转为字符串</li>
<li>循环引用时候回报错（a = {}, a.b = a 这种情况)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的方法遇到函数的话，JSON 将会序列化错误，可以使用 JSON.parse 以及 JSON.stringify 的第二个参数，对函数以及其他数据类型进行处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleParse</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleStringify</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, <span class="keyword">typeof</span> value);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="comment">// 避免 valuee = function() &#123;&#125; 时报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`i = <span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">    <span class="comment">// 正则表达式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> value === <span class="string">"string"</span> &amp;&amp;</span><br><span class="line">    /^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">2</span>&#125;-\d&#123;<span class="number">2</span>&#125;T\d&#123;<span class="number">2</span>&#125;:\d&#123;<span class="number">2</span>&#125;:\d&#123;<span class="number">2</span>&#125;/.test(value)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 时间日期对象，JSON.stringify(会自动把日期对象转为字符串，value已经是日期字符串格式 2020-12-26T12:38:48.964Z)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`new Date('<span class="subst">$&#123;value&#125;</span>')`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj, handleStringify), handleParse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法 2<br>解决了循环引用以及键名为 Symbol 的情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj, cached = new Map(</span>)) </span>&#123;</span><br><span class="line">  <span class="comment">// 若为函数的话，</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="comment">// // 直接返回</span></span><br><span class="line">    <span class="comment">// return obj;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若想复制函数，可以</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">`i = <span class="subst">$&#123;obj&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若为原始值，则直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">"object"</span>) <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理正则表达式</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">    <span class="comment">// // 直接返回</span></span><br><span class="line">    <span class="comment">// return obj;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若想复制，可以</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">`<span class="subst">$&#123;obj&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 Date 对象</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="comment">// // 直接返回</span></span><br><span class="line">    <span class="comment">// return obj;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若想复制，可以</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">`new Date(<span class="subst">$&#123;obj.getTime()&#125;</span>)`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cached.has(obj)) &#123;</span><br><span class="line">    <span class="comment">// 若已经出现，则直接返回</span></span><br><span class="line">    <span class="keyword">return</span> cached.get(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加入到缓存中</span></span><br><span class="line">  cached.set(obj, result);</span><br><span class="line"></span><br><span class="line">  [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)].forEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    key</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    result[key] = deepCopy(obj[key], cached);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="去空格"><a href="#去空格" class="headerlink" title="去空格"></a>去空格</h3><p>方法 1，正则表达式替换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTrim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myTrim(<span class="string">"    ok    "</span>).length);</span><br></pre></td></tr></table></figure>

<p>方法 2, 算出第一个不是空格的位置，以及最后一个不是空格的位置，然后截取字符对应的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTrim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> end = str.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; start &lt; str.length; start++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[start] !== <span class="string">" "</span>) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (; end &gt;= <span class="number">0</span>; end--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[end] !== <span class="string">" "</span>) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str.slice(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myTrim(<span class="string">"  ok   "</span>).length);</span><br></pre></td></tr></table></figure>

<p>方法 3： 字符串对象内置方法 trim()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"   ok  "</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.trim());</span><br></pre></td></tr></table></figure>

<h2 id="字符串全排列"><a href="#字符串全排列" class="headerlink" title="字符串全排列"></a>字符串全排列</h2><h3 id="广度优先实现"><a href="#广度优先实现" class="headerlink" title="广度优先实现"></a>广度优先实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (str.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [str];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> curChar = str[i];</span><br><span class="line">    <span class="keyword">const</span> combineArr = combine(str.slice(<span class="number">0</span>, i) + str.slice(i + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; combineArr.length; j++) &#123;</span><br><span class="line">      result.push(curChar + combineArr[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 避免出现 [aa, aa, aa, aa] 的情况</span></span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(result)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"combine(abc)"</span>, combine(<span class="string">"abc"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"combine(aab)"</span>, combine(<span class="string">"aab"</span>));</span><br></pre></td></tr></table></figure>

<h3 id="深度优先实现"><a href="#深度优先实现" class="headerlink" title="深度优先实现"></a>深度优先实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> <span class="title">_combine</span>(<span class="params">str, path = <span class="string">""</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result.push(path + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      _combine(str.slice(<span class="number">0</span>, i) + str.slice(i + <span class="number">1</span>), path + str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(str);</span><br><span class="line">  <span class="comment">// 去重，避免出现'aa' =&gt; [aa, aa] 的情况</span></span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(result)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"combine(abc)"</span>, combine(<span class="string">"abc"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"combine(aab)"</span>, combine(<span class="string">"aab"</span>));</span><br></pre></td></tr></table></figure>

<h2 id="排序和查找"><a href="#排序和查找" class="headerlink" title="排序和查找"></a>排序和查找</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortInsert</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历每一项</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">// 比前面的元素小，则交换位置</span></span><br><span class="line">        [arr[j - <span class="number">1</span>], arr[j]] = [arr[j], arr[j - <span class="number">1</span>]];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 已经到合适位置，停止向前比较</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortInsert([<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">61</span>, <span class="number">21</span>]));</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>并归排序就是将数组分隔成小组，对小组进行排序，等小组有序后，再将有序的小组合并成有序的大组，对数组递归使用并归排序，最终就会得到一个有序的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortMerge</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 只有一个数组的时候直接返回</span></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间的索引，将数组</span></span><br><span class="line">  <span class="keyword">const</span> indexMid = ~~(arr.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对数组进行分隔，进行并归排序，得到有序的数组</span></span><br><span class="line">  <span class="keyword">const</span> [part1, part2] = [</span><br><span class="line">    sortMerge(arr.slice(<span class="number">0</span>, indexMid)),</span><br><span class="line">    sortMerge(arr.slice(indexMid)),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"part"</span>, part1, part2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对有序的数组进行合并</span></span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (part1.length &gt; <span class="number">0</span> &amp;&amp; part2.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    result.push(part1[<span class="number">0</span>] &lt; part2[<span class="number">0</span>] ? part1.shift() : part2.shift());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  result = [...result, ...part1, ...part2];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortMerge([<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">61</span>, <span class="number">21</span>]));</span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>选取一个数值作为参考值，数组其他值与其比较，比它小的在其左侧，比它大的在其右侧，这样这个参考值在数组中的位置就确定了，然后继续递归对左右的数组进行快速排序，最后就会得到一个有序的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortQuickly</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> indexMid = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> arrLeft = [];</span><br><span class="line">  <span class="keyword">let</span> arrRight = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === indexMid) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[indexMid]) &#123;</span><br><span class="line">      <span class="comment">// 比选取的值小，则放到左侧</span></span><br><span class="line">      arrLeft.push(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 大于等于选取的值，放到右侧</span></span><br><span class="line">      arrRight.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归对左右的数组进行递归快速排序</span></span><br><span class="line">  <span class="keyword">return</span> [...sortQuickly(arrLeft), arr[indexMid], ...sortQuickly(arrRight)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortQuickly([<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">61</span>, <span class="number">21</span>]));</span><br></pre></td></tr></table></figure>

<h3 id="二位查找"><a href="#二位查找" class="headerlink" title="二位查找"></a>二位查找</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">arr, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span> || (arr.length === <span class="number">1</span> &amp;&amp; arr[<span class="number">0</span>] !== target)) &#123;</span><br><span class="line">    <span class="comment">// 数组已经没有可以比较的时候 || 最后一个元素与目标元素找不到的时候 =&gt; 元素不存在</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找中间的值作为参考值</span></span><br><span class="line">  <span class="keyword">const</span> indexMid = arr.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> valueMid = arr[indexMid];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 比较，所等于，则找到了， 目标值若小于参考值，则在左侧的数中继续二分查找，目标值若大于参考值，则取右侧数中二分查找</span></span><br><span class="line">  <span class="keyword">if</span> (valueMid === target) &#123;</span><br><span class="line">    <span class="keyword">return</span> indexMid;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; valueMid) &#123;</span><br><span class="line">    <span class="keyword">return</span> binarySearch(arr.slice(<span class="number">0</span>, indexMid - <span class="number">1</span>), target);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexMid + <span class="number">1</span> + binarySearch(arr.slice(indexMid + <span class="number">1</span>), target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(binarySearch([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">28</span>, <span class="number">42</span>, <span class="number">81</span>, <span class="number">98</span>], <span class="number">81</span>));</span><br></pre></td></tr></table></figure>

<p>另一种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">arr, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> indexLeft = <span class="number">0</span>,</span><br><span class="line">    indexRight = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (indexLeft &lt;= indexLeft) &#123;</span><br><span class="line">    <span class="keyword">const</span> indexMid = (indexLeft + indexRight) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> valueMid = arr[indexMid];</span><br><span class="line">    <span class="keyword">if</span> (target === valueMid) &#123;</span><br><span class="line">      <span class="keyword">return</span> indexMid;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; valueMid) &#123;</span><br><span class="line">      indexRight = indexMid - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      indexLeft = indexMid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(binarySearch([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">28</span>, <span class="number">42</span>, <span class="number">81</span>, <span class="number">98</span>], <span class="number">81</span>));</span><br></pre></td></tr></table></figure>

<h3 id="查找出现得最多的元素"><a href="#查找出现得最多的元素" class="headerlink" title="查找出现得最多的元素"></a>查找出现得最多的元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMost</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 新建一个map，键值作为map的键名，键值为出现的次数</span></span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.has(item)) &#123;</span><br><span class="line">      <span class="comment">// 若 map 中存在，则次数加 1</span></span><br><span class="line">      map.set(item, map.get(item) + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 不存在，则初始化为 1</span></span><br><span class="line">      map.set(item, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 统计完后，取出出现次数最多的键名，就是出现得最多的元素</span></span><br><span class="line">  <span class="keyword">let</span> [maxCount, maxValues] = [map.get(arr[<span class="number">0</span>]), [arr[<span class="number">0</span>]]];</span><br><span class="line">  map.forEach(<span class="function">(<span class="params">count, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; maxCount) &#123;</span><br><span class="line">      maxCount = count;</span><br><span class="line">      maxValues = [value];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count === maxCount) &#123;</span><br><span class="line">      maxValues.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> maxValues;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMost([<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"3"</span>, <span class="string">"55"</span>, <span class="string">"3"</span>, <span class="string">"55"</span>, <span class="string">"55"</span>, <span class="string">"12"</span>, <span class="string">"12"</span>]));</span><br></pre></td></tr></table></figure>

<h2 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h2><h3 id="使用-setTimeout-实现-setInterval"><a href="#使用-setTimeout-实现-setInterval" class="headerlink" title="使用 setTimeout 实现 setInterval"></a>使用 setTimeout 实现 setInterval</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要返回 id 可以停止定时器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInterval</span>(<span class="params">fn, interval, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isContinuous = <span class="literal">true</span>;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> <span class="title">_interval</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">      <span class="keyword">if</span> (isContinuous) &#123;</span><br><span class="line">        _interval(fn, interval, ...args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, interval);</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    isContinuous = <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stop = myInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"going on"</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h2><p>codepen 实例，请点击 =&gt; <a href="https://codepen.io/WeicoMY/pen/OJRvPPj" target="_blank" rel="noopener">https://codepen.io/WeicoMY/pen/OJRvPPj</a></p>
<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>防抖就是防止抖动，事件持续时间内触发的话只会触发最后一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, interval, context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置标志位</span></span><br><span class="line">  <span class="keyword">let</span> timeId = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 一段时间内再次触发的话，取消上次事件</span></span><br><span class="line">    <span class="keyword">if</span> (timeId) &#123;</span><br><span class="line">      clearTimeout(timeId);</span><br><span class="line">      timeId = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置若干秒后执行</span></span><br><span class="line">    timeId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">    &#125;, interval);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>节流，节省流量，限制触发的频率，限制一段时间内触发的次数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval, context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置标志位</span></span><br><span class="line">  <span class="keyword">let</span> isBusy = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isBusy) <span class="keyword">return</span>;</span><br><span class="line">    isBusy = <span class="literal">true</span>;</span><br><span class="line">    fn.apply(context, args);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      isBusy = <span class="literal">false</span>;</span><br><span class="line">    &#125;, interval);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原生-api-的实现"><a href="#原生-api-的实现" class="headerlink" title="原生 api 的实现"></a>原生 api 的实现</h2><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function">(<span class="params">context, ...argsBind</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...argsPass</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.apply(context, [...argsBind, ...argsPass]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> __randomKey = <span class="built_in">Math</span>.random().toString().slice(<span class="number">2</span>);</span><br><span class="line">  context[__randomKey] = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = context[__randomKey](...args);</span><br><span class="line">  <span class="keyword">delete</span> context[__randomKey];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> __randomKey = <span class="built_in">Math</span>.random().toString().slice(<span class="number">2</span>);</span><br><span class="line">  context[__randomKey] = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = context[__randomKey](...args);</span><br><span class="line">  <span class="keyword">delete</span> context[__randomKey];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"args: "</span>, args);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"this.a is: "</span>, <span class="keyword">this</span>.a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">func(<span class="string">"global.a"</span>);</span><br><span class="line">func.myApply(obj, [<span class="string">"obj.a"</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstanceOf</span>(<span class="params">child, parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (child.__proto__) &#123;</span><br><span class="line">    <span class="keyword">if</span> (child.__proto__.constructor === parent) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    child = child.__proto__;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myInstanceOf([], <span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure>

<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">consFunc, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数四步</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个对象</span></span><br><span class="line">  <span class="keyword">const</span> _newObj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将创建对象的 prototype 设置为该构造函数的  prototype</span></span><br><span class="line">  _newObj.__proto__ = consFunc.prototype;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这个对象上执行构造函数</span></span><br><span class="line">  <span class="keyword">const</span> result = consFunc.apply(_newObj, args);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若执行构造函数返回一个对象，则返回该对象，否则返回创建的对象;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">"object"</span> ? result : _newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function">(<span class="params">func, init</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 接受一个函数，以及一个初始值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若有初始值，则从数组的第一个数值开始</span></span><br><span class="line">  <span class="comment">// 若没有初始值，则初始值就是第一个元素，后续从数组的第二个元素开始</span></span><br><span class="line">  <span class="keyword">const</span> hasInit = init !== <span class="literal">undefined</span></span><br><span class="line">  init = init || <span class="keyword">this</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 每次都执行函数，将函数的结果赋值给init</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = hasInit ? <span class="number">0</span> : <span class="number">1</span>; i &lt; <span class="keyword">this</span>.length i++) &#123;</span><br><span class="line">    init = func(init, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> init;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myForEach = <span class="function">(<span class="params">func</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">    func(<span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="isArray"><a href="#isArray" class="headerlink" title="isArray()"></a>isArray()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.myIsArray = <span class="function">(<span class="params">elem</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.apply(elem).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">"Array"</span>;</span><br><span class="line">  <span class="comment">// return Object.prototype.toString.apply(elem).toLowerCase() === "[object array]";</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise()"></a>Promise()</h3>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>react 项目的基本搭建</title>
    <url>/blog/2020/02/29/react-project-note/</url>
    <content><![CDATA[<h1 id="react-项目配置"><a href="#react-项目配置" class="headerlink" title="react 项目配置"></a>react 项目配置</h1><p>自己搭了一套 react 的的后台，下面记录了我一步步搭建的过程，希望对大家有所帮助。</p>
<p>文章主要描述了下面几个部分</p>
<ul>
<li>项目的结构</li>
<li>项目的搭建过程<ul>
<li>webpack 的多环境配置、loader配置、webserver配置等</li>
<li>babel 的基本配置</li>
<li>eslint 的基本配置<a id="more"></a>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|</span><br><span class="line">|- config               &#x2F;&#x2F; webpack 相关配置</span><br><span class="line">|   |- webpack.common.js    &#x2F;&#x2F; 通用的配置</span><br><span class="line">|   |- webpack.dev.js       &#x2F;&#x2F; 发展的配置 </span><br><span class="line">|   |- webpack.prod.js      &#x2F;&#x2F; 生产的配置</span><br><span class="line">|</span><br><span class="line">|- dist                 &#x2F;&#x2F; 放置打包好的文件</span><br><span class="line">|- public               &#x2F;&#x2F; 放置html模板以及图标等</span><br><span class="line">|- src</span><br><span class="line">|   |- apis             &#x2F;&#x2F; apis 接口文件</span><br><span class="line">|   |   |- brand.js</span><br><span class="line">|   |   |- channel.js</span><br><span class="line">|   |   |- ...</span><br><span class="line">|   |</span><br><span class="line">|   |- assets           &#x2F;&#x2F; 放置通用的资源</span><br><span class="line">|   |   |- images</span><br><span class="line">|   |   |- icons</span><br><span class="line">|   |</span><br><span class="line">|   |- components       &#x2F;&#x2F; 通用的组件</span><br><span class="line">|   |   |- PageLoading</span><br><span class="line">|   |</span><br><span class="line">|   |- config</span><br><span class="line">|   |   |- menu.js      &#x2F;&#x2F; 菜单配置</span><br><span class="line">|   |   |- routes.js    &#x2F;&#x2F; 路由配置</span><br><span class="line">|   |</span><br><span class="line">|   |- layouts          &#x2F;&#x2F; 布局组件</span><br><span class="line">|   |   |- BasicLayout  &#x2F;&#x2F; 基本布局</span><br><span class="line">|   |   |   |- components   &#x2F;&#x2F; 组成布局的组件</span><br><span class="line">|   |   |   |- index.jsx    &#x2F;&#x2F; 布局的主要结构文件</span><br><span class="line">|   |   |   |- index.module.scss    &#x2F;&#x2F; 布局对应的scss</span><br><span class="line">|   |   |-...</span><br><span class="line">|   |</span><br><span class="line">|   |- pages            &#x2F;&#x2F; 页面文件</span><br><span class="line">|   |   |- OrderManage</span><br><span class="line">|   |   |- ...</span><br><span class="line">|   |</span><br><span class="line">|   |- stores</span><br><span class="line">|   |   |- actions</span><br><span class="line">|   |   |   |- index.js &#x2F;&#x2F; 触发 actions 的常量名列表</span><br><span class="line">|   |   |   |- menu.js  &#x2F;&#x2F; 对应的 actions</span><br><span class="line">|   |   |</span><br><span class="line">|   |   |- reducers</span><br><span class="line">|   |   |   |- index.js &#x2F;&#x2F; 合并各个模块的 reducer，输入根的 reducer</span><br><span class="line">|   |   |   |- menu.js  &#x2F;&#x2F; 对应模块的 reducer</span><br><span class="line">|   |   |</span><br><span class="line">|   |   |- index.js     &#x2F;&#x2F; 输出根据 rootReducer 生成 store</span><br><span class="line">|   |</span><br><span class="line">|   |- utils &#x2F;&#x2F; 各种工具</span><br><span class="line">|   |   |- date.js      &#x2F;&#x2F; 日期格式化相关的工具</span><br><span class="line">|   |   |- request.js   &#x2F;&#x2F; 封装好的 axios 组件</span><br><span class="line">|   |</span><br><span class="line">|   |- index.js         &#x2F;&#x2F; 入口文件</span><br><span class="line">|   |- router.jsx       &#x2F;&#x2F; 生成路由组件</span><br><span class="line">|</span><br><span class="line">|- test                 &#x2F;&#x2F; 测试文件</span><br><span class="line">|   |- unit             &#x2F;&#x2F; 单元测试</span><br><span class="line">|</span><br><span class="line">|- .babelrc             &#x2F;&#x2F; babel 相关配置</span><br><span class="line">|- .editourconfig       &#x2F;&#x2F; 编辑器的相关配置，编辑器会根据此格式化文件</span><br><span class="line">|- .eslintrc.js         &#x2F;&#x2F; eslint 的配置文件</span><br><span class="line">|- .gitignore           &#x2F;&#x2F; git 忽略追踪的配置文件</span><br><span class="line">|- jsconfig.josn        &#x2F;&#x2F; js的配置文件，可以让别名 alias 得到识别</span><br><span class="line">|- package.json         &#x2F;&#x2F; 配置文件</span><br><span class="line">|- postcss.config.js    &#x2F;&#x2F; postcss 配置文件</span><br><span class="line">|- README.md            &#x2F;&#x2F; Readme.md 文件</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>初始化项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>安装webpack</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>
<p>webpack 4+ 需要安装 CLI</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-cli</span><br></pre></td></tr></table></figure>
<p>创建一个 config 文件夹，专门用于存放 webpack 的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|- config</span><br><span class="line">    |- webpack.common.js    存放开发和生产环境共用的配置</span><br><span class="line">    |- webpack.dev.js       开发环境的配置</span><br><span class="line">    |- webpack.prod.js      生产环境的配置</span><br></pre></td></tr></table></figure>

<p>这里使用到<code>webpack-merge</code>合并通用配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i webpack-merge -D</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">'../'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: path.resolve(rootPath, <span class="string">'src/index'</span>)    <span class="comment">// 入口文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'static/js/[name].[hash:8].bundle.js'</span>,       <span class="comment">// 将文件放置到 static/js目录下，名字格式为[name].[hash:8].bundle.js</span></span><br><span class="line">    chunkFilename: <span class="string">'static/js/[name].[hash:8].bundle.js'</span>,  <span class="comment">// 将 bunndle 文件也放置在 static/js 目录下</span></span><br><span class="line">    path: path.resolve(rootPath, <span class="string">'dist'</span>),         <span class="comment">// 打包文件存放的根目录</span></span><br><span class="line">    publicPath: <span class="string">'/'</span>                               <span class="comment">// 引入文件的根目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123; ...</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [ ... ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: path.resolve(rootPath, <span class="string">'src'</span>)                      <span class="comment">// 设置 @ 为 src 的别名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.json'</span>]                      <span class="comment">// 没有扩展名的时候，尝试的扩展名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">"webpack-merge"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">"./webpack.common"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">"../"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>, <span class="comment">// 设置为开发模式，使用 webpack 内置专为开发配置的设置</span></span><br><span class="line">  devtool: <span class="string">"cheap-source-map"</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [ ... ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// prod.webpack.js</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">"webpack-merge"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">"./webpack.common"</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>); <span class="comment">// 压缩 css, 好像有没有也可以~</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">"../"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">"production"</span>, <span class="comment">// 启动生产模式，使用webpack默认设置的生产模式的设定</span></span><br><span class="line">  devtool: <span class="string">"none"</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [ ... ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [ ... ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在<code>package.json</code>中调用对应的配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --config ./config/webpack.dev.js"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack --config ./config/webpack.prod.js"</span></span><br><span class="line">  &#125;,Ï</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h4><blockquote>
<p>HtmlWebpackPlugin插件自动生成html文件，引入对应的包文件</p>
</blockquote>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>在<code>common.js</code>中添加以下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">const rootPath &#x3D; path.resolve(__dirname, &#39;..&#x2F;&#39;);</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">          &#x2F;&#x2F; 自动生成引入 bundle 文件的 html</span><br><span class="line">          template: path.resolve(rootPath, &#39;public&#x2F;index.html&#39;),  &#x2F;&#x2F; 使用 public 下的 index 文件作为 html 模板</span><br><span class="line">          favicon: path.resolve(rootPath, &#39;public&#x2F;favicon.ico&#39;)   &#x2F;&#x2F; 引入 图标</span><br><span class="line">    &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>
<p>在<code>dev.js</code>配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">  contentBase: path.resolve(rootPath, &quot;dist&quot;), &#x2F;&#x2F; 服务器的根目录</span><br><span class="line">    compress: true,     &#x2F;&#x2F; 启用 gzip 压缩</span><br><span class="line">    overlay: true,      &#x2F;&#x2F; 错误在浮层显示</span><br><span class="line">    open: true,         &#x2F;&#x2F; 服务器开启后，自动在浏览器打开</span><br><span class="line">    hot: true,          &#x2F;&#x2F; 启用热加载</span><br><span class="line">    host: &quot;0.0.0.0&quot;,    &#x2F;&#x2F; 服务启动的ip，可以让在局域网内的用户都可以访问</span><br><span class="line">    port: 9000,         &#x2F;&#x2F; 开启的端口</span><br><span class="line">    proxy: [</span><br><span class="line">      &#x2F;&#x2F; 代理配置</span><br><span class="line">      &#123;</span><br><span class="line">        context: &quot;&#x2F;api&#x2F;geo&#x2F;&quot;,</span><br><span class="line">        target: &quot;http:&#x2F;&#x2F;0.0.0.0:1131&quot;,  &#x2F;&#x2F; 转发的地址</span><br><span class="line">        changeOrigin: true,             &#x2F;&#x2F; 是否改变转发的域名</span><br><span class="line">        secure: false                   &#x2F;&#x2F; 关闭安全的设定</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        context: [</span><br><span class="line">          &quot;&#x2F;api&#x2F;v2&quot;,</span><br><span class="line">          &quot;&#x2F;api&#x2F;orderproduct&quot;,</span><br><span class="line">          &quot;&#x2F;api&#x2F;member&quot;,</span><br><span class="line">          &quot;&#x2F;api&#x2F;user&quot;,</span><br><span class="line">          &quot;&#x2F;api&#x2F;channel&quot;,</span><br><span class="line">          &quot;&#x2F;api&#x2F;store2&quot;,</span><br><span class="line">          &quot;&#x2F;api&#x2F;white&quot;,</span><br><span class="line">          &quot;&#x2F;api&#x2F;taobao&quot;,</span><br><span class="line">          &quot;&#x2F;api&#x2F;tool&quot;,</span><br><span class="line">          &quot;&#x2F;api&#x2F;brand&quot;,</span><br><span class="line">          &quot;&#x2F;api&#x2F;order&quot;</span><br><span class="line">        ],                              </span><br><span class="line">        target: &quot;http:&#x2F;&#x2F;127.0.0.1:9502&quot;     &#x2F;&#x2F; 批量转发，上面的接口都转发到本地的9502接口</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        context: &quot;&#x2F;api&quot;,</span><br><span class="line">        target: &quot;http:&#x2F;&#x2F;127.0.0.1:11299&quot;,   &#x2F;&#x2F; api前缀的转发到11299端口</span><br><span class="line">        changeOrigin: true,                 &#x2F;&#x2F; 是否改变转发的域名</span><br><span class="line">        secure: false                       &#x2F;&#x2F; 关闭安全的设定</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    historyApiFallback: true                &#x2F;&#x2F; 404的时候重定向回 index.html</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>某些路由使用的history模式的路由，需要404时候，重定向回 index.html，则可以开启下面的选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">historyApiFallback: true &#x2F;&#x2F; 404的时候重定向回 index.html</span><br></pre></td></tr></table></figure>

<h4 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h4><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>在common中配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; CleanWebpackPlugin &#125; &#x3D; require(&#39;clean-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        new CleanWebpackPlugin() &#x2F;&#x2F; 清除 dist 文件</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图片的loader"><a href="#图片的loader" class="headerlink" title="图片的loader"></a>图片的loader</h4><p>安装url-loader, url-loader可以将小于一定大小的图片，转换成DataURL格式然后引入，对于大于等于指定大小的图片，将会默认使用 file-loader 将图片引入，所以需要安装file-loader</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i url-loader file-loader -D</span><br></pre></td></tr></table></figure>
<p>loader配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                test: &#x2F;\.(png|jpe?g|gif)$&#x2F;i,</span><br><span class="line">                loader: &#39;url-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  limit: 10240,                           &#x2F;&#x2F; 小于 10kb 的图片转化为 url 数据引入，否则调用 file-loader 引入文件</span><br><span class="line">                  name: &#39;static&#x2F;img&#x2F;[path][name].[ext]&#39;   &#x2F;&#x2F; 图片放置在 static&#x2F;img 目录下, 生产模式可以使用内容哈希的文件名，来缓存</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="字体文件的loader"><a href="#字体文件的loader" class="headerlink" title="字体文件的loader"></a>字体文件的loader</h4><p>字体文件loader与图片文件的loader类似,同样需要url-loader以及file-loader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i url-loader file-loader -D</span><br></pre></td></tr></table></figure>
<p>option配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  &#123;</span><br><span class="line">    test: &#x2F;\.(svg|eot|ttf|woff|woff2)$&#x2F;i,</span><br><span class="line">    loader: &#39;url-loader&#39;,</span><br><span class="line">    options: &#123;</span><br><span class="line">      limit: 4096,                            &#x2F;&#x2F; 与图片loader类似</span><br><span class="line">      name: &#39;static&#x2F;fonts&#x2F;[path][name].[ext]&#39; &#x2F;&#x2F; 字体文件放置在 static&#x2F;fonts 文件下</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="css以及scss样式loader的配置"><a href="#css以及scss样式loader的配置" class="headerlink" title="css以及scss样式loader的配置"></a>css以及scss样式loader的配置</h4><p>先安装css的相关loader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i style-loader css-loader -D</span><br></pre></td></tr></table></figure>
<p>安装scss的相关loader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i node-sass sass-loader --save-dev</span><br></pre></td></tr></table></figure>
<p>为了让自动加上css前缀，需要安装postcss</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install postcss-loader autoprefixer --save-dev</span><br></pre></td></tr></table></figure>
<p>在根目录创建一个 postcss.config.js 配置文件,</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  loader: <span class="string">"postcss-loader"</span>,</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">"postcss-preset-env"</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>安装<code>postcss-preset-env</code>，默认包含了autoprefixer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D postcss-preset-env</span><br></pre></td></tr></table></figure>
<p>对于module后缀的启动css模块化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 对于module。scss或者 module.css后缀的文件，开启 css 模块化，并设定指定生成class的格式</span><br><span class="line">  test: &#x2F;\.module\.s?css&#x2F;,</span><br><span class="line">  use: [</span><br><span class="line">    &#39;style-loader&#39;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: &#39;css-loader&#39;,</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: 2,</span><br><span class="line">        modules: &#123;</span><br><span class="line">          mode: &#39;local&#39;,</span><br><span class="line">          localIdentName: &#39;[path][name]__[local]--[hash:base64:5]&#39; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;postcss-loader&#39;,</span><br><span class="line">    &#39;sass-loader&#39;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>其余的样式文件关闭css模块化，否则会造成引入的antd样式失效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 除了带有module结尾的scss文件或者css文件，不使用css模块化，否则将会导致antd的样式失效</span><br><span class="line">    test: &#x2F;\.s?css$&#x2F;,</span><br><span class="line">    exclude: &#x2F;\.module\.s?css$&#x2F;,</span><br><span class="line">    use: [</span><br><span class="line">      &#39;style-loader&#39;,</span><br><span class="line">      &#123;</span><br><span class="line">        loader: &#39;css-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          importLoaders: 2</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#39;postcss-loader&#39;,</span><br><span class="line">      &#39;sass-loader&#39;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于生产环境，若想将css提取出来，需要安装<code>mini-css-extract-plugin</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i mini-css-extract-plugin --save-dev</span><br></pre></td></tr></table></figure>
<p>更改<code>webpack.prod.js</code>,将style-loader换成 css module 即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; module.scss 或者 module.css 结尾的文件启动css module，并提取到单独的文件夹</span><br><span class="line">        test: &#x2F;\.module\.s?css&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader &#x2F;&#x2F; 提取到单独的文件</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#39;css-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: 2,</span><br><span class="line">              modules: &#123;</span><br><span class="line">                mode: &#39;local&#39;,</span><br><span class="line">                localIdentName: &#39;[hash:base64:8]&#39;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#39;postcss-loader&#39;,</span><br><span class="line">          &#39;sass-loader&#39;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 除了module的scss或css文件，都不启动 css module 并且提取到单独的文件</span><br><span class="line">        test: &#x2F;\.s?css$&#x2F;,</span><br><span class="line">        exclude: &#x2F;\.module\.s?css$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#39;css-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: 2</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#39;postcss-loader&#39;,</span><br><span class="line">          &#39;sass-loader&#39;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &#39;static&#x2F;css&#x2F;[name].[hash:8].css&#39;,         &#x2F;&#x2F; 将css文件都提取到 static&#x2F;css 目录下</span><br><span class="line">      chunkFilename: &#39;static&#x2F;css&#x2F;[id].[hash:8].css&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="babel配置"><a href="#babel配置" class="headerlink" title="babel配置"></a>babel配置</h4><p>react中大多都是使用es6语法编写，为了让es6语法以及react的jsx语法能够正确在浏览器上运行，需要安装babel，</p>
<ul>
<li>@babel-core</li>
<li>@babel/preset-env 将es6语法转换成es5语法</li>
<li>@babel/preset-react 将jsx语法转换为Javascript</li>
<li>@babel/polyfill: ES6 内置方法和函数转化垫片</li>
<li>@babel/plugin-transform-runtime: 避免 polyfill 污染全局变量，减小打包体积<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i @babel&#x2F;core babel-loader @babel&#x2F;preset-env @babel&#x2F;preset-react --save-dev</span><br></pre></td></tr></table></figure>
在根目录创建<code>.babelrc</code>文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;, &quot;@babel&#x2F;preset-react&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
若想转换es6新的语法，则需要安装<code>@babel/polyfill</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i @babel&#x2F;polyfill @babel&#x2F;runtime</span><br></pre></td></tr></table></figure>
若想重复利用babel注入的工具代码，可以安装以下插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@babel&#x2F;plugin-transform-runtime</span><br></pre></td></tr></table></figure>
若想要直接在 class 里面声明静态类变量以及直接声明箭头函数的实例方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Dog &#123;</span><br><span class="line">    &#x2F;&#x2F; 声明静态变量</span><br><span class="line">    static type &#x3D; &#39;animal&#39;;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 箭头函数的实例方法</span><br><span class="line">    bark &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;Wang Wang ~&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
需要安装<a href="https://www.npmjs.com/package/@babel/plugin-proposal-class-properties" target="_blank" rel="noopener"> @babel/plugin-proposal-class-properties </a>插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel&#x2F;plugin-proposal-class-properties</span><br></pre></td></tr></table></figure>
babel 整体配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;, &quot;@babel&#x2F;preset-react&quot;],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;react-hot-loader&#x2F;babel&quot;,</span><br><span class="line">    &quot;@babel&#x2F;plugin-proposal-class-properties&quot;,</span><br><span class="line">    [&quot;import&quot;, &#123;</span><br><span class="line">      &quot;libraryName&quot;: &quot;antd&quot;,</span><br><span class="line">      &quot;libraryDirectory&quot;: &quot;es&quot;,</span><br><span class="line">      &quot;style&quot;: &quot;css&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="eslint配置"><a href="#eslint配置" class="headerlink" title="eslint配置"></a>eslint配置</h4><figure class="highlight javascript"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [<span class="string">'eslint:recommended'</span>, <span class="string">'plugin:react/recommended'</span>],</span><br><span class="line">  globals: &#123;</span><br><span class="line">    Atomics: <span class="string">'readonly'</span>,</span><br><span class="line">    SharedArrayBuffer: <span class="string">'readonly'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parser: <span class="string">'babel-eslint'</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaFeatures: &#123;</span><br><span class="line">      jsx: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ecmaVersion: <span class="number">2018</span>,</span><br><span class="line">    sourceType: <span class="string">'module'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="string">'react'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'react/jsx-filename-extension'</span>: [<span class="string">'warn'</span>, &#123; <span class="attr">extensions</span>: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>] &#125;],</span><br><span class="line">    <span class="string">'react/prop-types'</span>: [<span class="string">'error'</span>, &#123; <span class="attr">skipUndeclared</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    <span class="string">'no-unused-vars'</span>: [<span class="string">'warn'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  settings: &#123;</span><br><span class="line">    <span class="string">'import/resolver'</span>: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        map: [[<span class="string">'@'</span>, <span class="string">'./src'</span>]],</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.json'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="整体webpack的配置"><a href="#整体webpack的配置" class="headerlink" title="整体webpack的配置"></a>整体webpack的配置</h4><p>项目 webpack 文件如下：</p>
<figure class="highlight js"><figcaption><span>webpack.common.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.commmon.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">'../'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: path.resolve(rootPath, <span class="string">'src/index'</span>)    <span class="comment">// 入口文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'static/js/[name].[hash:8].bundle.js'</span>,       <span class="comment">// 将文件放置到 static/js目录下，名字格式为[name].[hash:8].bundle.js</span></span><br><span class="line">    chunkFilename: <span class="string">'static/js/[name].[hash:8].bundle.js'</span>,  <span class="comment">// 将 bunndle 文件也放置在 static/js 目录下</span></span><br><span class="line">    path: path.resolve(rootPath, <span class="string">'dist'</span>),         <span class="comment">// 打包文件存放的根目录</span></span><br><span class="line">    publicPath: <span class="string">'/'</span>                               <span class="comment">// 引入文件的根目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,                          <span class="comment">// js, jsx 文件使用的 loader</span></span><br><span class="line">        use: [<span class="string">'babel-loader'</span>, <span class="string">'eslint-loader'</span>],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>                   <span class="comment">// 不转化 node_modules 下的文件</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 自动生成引入 bundle 文件的 html</span></span><br><span class="line">      template: path.resolve(rootPath, <span class="string">'public/index.html'</span>),  <span class="comment">// 使用 public 下的 index 文件作为 html 模板</span></span><br><span class="line">      favicon: path.resolve(rootPath, <span class="string">'public/favicon.ico'</span>)   <span class="comment">// 引入 图标</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin() <span class="comment">// 清除 dist 文件夹</span></span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: path.resolve(rootPath, <span class="string">'src'</span>)                      <span class="comment">// 设置 @ 为 src 的别名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.json'</span>]                      <span class="comment">// 没有扩展名的时候，尝试的扩展名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>webpack.dev.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">"webpack-merge"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">"./webpack.common"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">"../"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>, <span class="comment">// 设置为开发模式，使用 webpack 内置专为开发配置的设置</span></span><br><span class="line">  devtool: <span class="string">"cheap-source-map"</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 对于module。scss或者 module.css后缀的文件，开启 css 模块化，并设定指定生成class的格式</span></span><br><span class="line">        test: <span class="regexp">/\.module\.s?css/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">"style-loader"</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"css-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: <span class="number">2</span>,</span><br><span class="line">              modules: &#123;</span><br><span class="line">                mode: <span class="string">"local"</span>,</span><br><span class="line">                localIdentName: <span class="string">"[local]--[hash:base64:5]"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"postcss-loader"</span>,</span><br><span class="line">          <span class="string">"sass-loader"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 除了带有module结尾的scss文件或者css文件，不使用css模块化，否则将会导致antd的样式失效</span></span><br><span class="line">        test: <span class="regexp">/\.s?css$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/\.module\.s?css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">"style-loader"</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"css-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"postcss-loader"</span>,</span><br><span class="line">          <span class="string">"sass-loader"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpe?g|gif)$/i</span>,</span><br><span class="line">        loader: <span class="string">"url-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">4096</span>, <span class="comment">// 小于 10kb 的图片转化为 url 数据引入，否则调用 file-loader 引入文件</span></span><br><span class="line">          name: <span class="string">"static/img/[path][name].[ext]"</span> <span class="comment">// 图片放置在 static/img 目录下</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(svg|eot|ttf|woff|woff2)$/i</span>,</span><br><span class="line">        loader: <span class="string">"url-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">4096</span>, <span class="comment">// 与图片loader类似</span></span><br><span class="line">          name: <span class="string">"static/fonts/[path][name].[ext]"</span> <span class="comment">// 字体文件放置在 static/fonts 文件下</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.resolve(rootPath, <span class="string">"dist"</span>), <span class="comment">// 服务器的根目录</span></span><br><span class="line">    compress: <span class="literal">true</span>,     <span class="comment">// 启用 gzip 压缩</span></span><br><span class="line">    overlay: <span class="literal">true</span>,      <span class="comment">// 错误在浮层显示</span></span><br><span class="line">    open: <span class="literal">true</span>,         <span class="comment">// 服务器开启后，自动在浏览器打开</span></span><br><span class="line">    hot: <span class="literal">true</span>,          <span class="comment">// 启用热加载</span></span><br><span class="line">    host: <span class="string">"0.0.0.0"</span>,    <span class="comment">// 服务启动的ip，可以让在局域网内的用户都可以访问</span></span><br><span class="line">    port: <span class="number">9000</span>,         <span class="comment">// 开启的端口</span></span><br><span class="line">    proxy: [</span><br><span class="line">      <span class="comment">// 代理配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        context: <span class="string">"/api/geo/"</span>,</span><br><span class="line">        target: <span class="string">"http://0.0.0.0:1131"</span>,  <span class="comment">// 转发的地址</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,             <span class="comment">// 是否改变转发的域名</span></span><br><span class="line">        secure: <span class="literal">false</span>                   <span class="comment">// 关闭安全的设定</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        context: [</span><br><span class="line">          <span class="string">"/api/v2"</span>,</span><br><span class="line">          <span class="string">"/api/orderproduct"</span>,</span><br><span class="line">          <span class="string">"/api/member"</span>,</span><br><span class="line">          <span class="string">"/api/user"</span>,</span><br><span class="line">          <span class="string">"/api/channel"</span>,</span><br><span class="line">          <span class="string">"/api/store2"</span>,</span><br><span class="line">          <span class="string">"/api/white"</span>,</span><br><span class="line">          <span class="string">"/api/taobao"</span>,</span><br><span class="line">          <span class="string">"/api/tool"</span>,</span><br><span class="line">          <span class="string">"/api/brand"</span>,</span><br><span class="line">          <span class="string">"/api/order"</span></span><br><span class="line">        ],                              </span><br><span class="line">        target: <span class="string">"http://127.0.0.1:9502"</span>     <span class="comment">// 批量转发，上面的接口都转发到本地的9502接口</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        context: <span class="string">"/api"</span>,</span><br><span class="line">        target: <span class="string">"http://127.0.0.1:11299"</span>,   <span class="comment">// api前缀的转发到11299端口</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,                 <span class="comment">// 是否改变转发的域名</span></span><br><span class="line">        secure: <span class="literal">false</span>                       <span class="comment">// 关闭安全的设定</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>                <span class="comment">// 404的时候重定向回 index.html</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">"process.env.NODE_ENV"</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"development"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>webpack.prod.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">"webpack-merge"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">"./webpack.common"</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>); <span class="comment">// 压缩 css, 好像有没有也可以~</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">"../"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">"production"</span>, <span class="comment">// 启动生产模式，使用webpack默认设置的生产模式的设定</span></span><br><span class="line">  devtool: <span class="string">"none"</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// module.scss 或者 module.css 结尾的文件启动css module，并提取到单独的文件夹</span></span><br><span class="line">        test: <span class="regexp">/\.module\.s?css/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader <span class="comment">// 提取到单独的文件</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"css-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: <span class="number">2</span>,</span><br><span class="line">              modules: &#123;</span><br><span class="line">                mode: <span class="string">"local"</span>,</span><br><span class="line">                localIdentName: <span class="string">"[hash:base64:8]"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"postcss-loader"</span>,</span><br><span class="line">          <span class="string">"sass-loader"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 除了module的scss或css文件，都不启动 css module 并且提取到单独的文件</span></span><br><span class="line">        test: <span class="regexp">/\.s?css$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/\.module\.s?css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"css-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"postcss-loader"</span>,</span><br><span class="line">          <span class="string">"sass-loader"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 图片的loader，小于10Kb就使用base64编码,否则则调用file-loader引入文件，文件名使用由内容哈希组成的文件</span></span><br><span class="line">        test: <span class="regexp">/\.(png|jpe?g|gif)$/i</span>,</span><br><span class="line">        loader: <span class="string">"url-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">4096</span>,</span><br><span class="line">          name: <span class="string">"static/img/[hash:16].[ext]"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 字体文件loader，小于4kb的字体使用base64格式引入，否则使用file-loader引入，字体文件名为内容哈希组成的文件</span></span><br><span class="line">        test: <span class="regexp">/\.(svg|eot|ttf|woff|woff2)$/i</span>,</span><br><span class="line">        loader: <span class="string">"url-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">4096</span>,</span><br><span class="line">          name: <span class="string">"static/fonts/[hash:16].[ext]"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">"process.env.NODE_ENV"</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"production"</span>) <span class="comment">// 将文件中的process.env.NODE_ENV 设置为 production，以优化某些库中的代码</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 提取 css 到单独的文件</span></span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">"static/css/[name].[hash:8].css"</span>, <span class="comment">// 将css文件都提取到 static/css 目录下</span></span><br><span class="line">      chunkFilename: <span class="string">"static/css/[id].[hash:8].css"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 压缩 css</span></span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class="line">      assetNameRegExp: <span class="regexp">/\.css$/g</span>,</span><br><span class="line">      cssProcessor: <span class="built_in">require</span>(<span class="string">"cssnano"</span>), <span class="comment">//用于优化\最小化 CSS 的 CSS处理器，默认为 cssnano</span></span><br><span class="line">      cssProcessorOptions: &#123; <span class="attr">safe</span>: <span class="literal">true</span>, <span class="attr">discardComments</span>: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125; &#125;, <span class="comment">//传递给 cssProcessor 的选项，默认为&#123;&#125;</span></span><br><span class="line">      canPrint: <span class="literal">true</span> <span class="comment">//布尔值，指示插件是否可以将消息打印到控制台，默认为 true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在<code>webpack.common.js</code>配置输入和输出</p>
<figure class="highlight javascript"><figcaption><span>webpack.common.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rootPath = path.resolve(_dirname, <span class="string">'../'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: path.resolve(rootPath, <span class="string">'src/index'</span>)    <span class="comment">// 入口文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'static/js/[name].bundle.js'</span>,       <span class="comment">// 将文件放置到 static/js目录下，名字格式为[name].bundle.js</span></span><br><span class="line">    chunkFilename: <span class="string">'static/js/[name].bundle.js'</span>,  <span class="comment">// 将 bunndle 文件也放置在 static/js 目录下</span></span><br><span class="line">    path: path.resolve(rootPath, <span class="string">'dist'</span>),         <span class="comment">// 打包文件存放的根目录</span></span><br><span class="line">    publicPath: <span class="string">'/'</span>                               <span class="comment">// 引入文件的根目录</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
</search>
